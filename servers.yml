Description: >
    Sarah Lyne / Udacity Project 2 / AWS Cloud DevOps Course
    
    This template deploys security groups, load balancers, listeners, autoscaling, Ubuntu servers for code, iam users.          



Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:
              
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} LBSecGroup

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                  !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} WebServerSecGroup

    IamS3BucketRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - 'ec2.amazonaws.com'
                  Action:
                  - 'sts:AssumeRole'
            Path: "/"
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} S3Bucket Role
                
    IAMRolesForInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
            - Ref: IamS3BucketRole

                
    IAMRolesForInstancePolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: IAMRolesForInstancePolicy
            PolicyDocument:
                Statement:
                - Effect: Allow
                  Action:
                  - s3:Get*
                  Resource: "*"
            Roles:
            - Ref: IamS3BucketRole


    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip
                    echo "Udagram Web Server is Up and Running!  It works! Udagram, Udacity" > index.html      
            ImageId: ami-0ac73f33a1888c64a  #Ubuntu AMI ID in us-west-2 region
            IamInstanceProfile: !Ref IAMRolesForInstanceProfile
            SecurityGroups:
            - Ref: WebServerSecGroup
            InstanceType: t3.small
            BlockDeviceMappings:
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: '10'


    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: 
                !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MinSize: '2'
            MaxSize: '6'
            TargetGroupARNs:
            - Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            - Ref: LBSecGroup
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} WebAppLoadBalancer

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref WebAppLB
            Port: '80'
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1


    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 20
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 15
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName} WebAppTargetGroup

Outputs:
    LoadBalancerURL:
        Description: URL for LoadBalancer DNS 
        Value: !Join [ "", [ 'Udagram URL is: ', 'http://', !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-DNS-NAME                    
